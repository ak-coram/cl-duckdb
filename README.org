* cl-duckdb (WiP)

#+begin_html
<div align="center">
  <a href="https://upload.wikimedia.org/wikipedia/commons/4/43/Pair_of_mandarin_ducks.jpg" target="_blank">
    <img alt="鴛鴦戲水" title="鴛鴦戲水" src="https://upload.wikimedia.org/wikipedia/commons/thumb/4/43/Pair_of_mandarin_ducks.jpg/440px-Pair_of_mandarin_ducks.jpg" width="220" height="165">
  </a>
</div>
<p align="center">
  <a href="https://github.com/ak-coram/cl-duckdb/actions">
    <img alt="Build Status" src="https://github.com/ak-coram/cl-duckdb/workflows/CI/badge.svg" />
  </a>
</p>
#+end_html

This is a Common Lisp [[https://cffi.common-lisp.dev/][CFFI]] wrapper around the [[https://duckdb.org/][DuckDB]] C API.

** Dependencies

Currently the following Common Lisp implementations and operating
systems are tested via [[https://github.com/ak-coram/cl-duckdb/blob/main/.github/workflows/CI.yml][CI]] on x86-64 (some BSDs are also known to
work):

- [[https://sbcl.org/][SBCL]] (Linux, Windows, macOS)
- [[https://ccl.clozure.com/][CCL]] (Linux, macOS)
- [[https://ecl.common-lisp.dev/][ECL]] (Linux, macOS)

The following native libraries need to be installed in a location
where CFFI can find them:

- [[https://sourceware.org/libffi/][libffi]]
- [[https://duckdb.org/][DuckDB]]

** Installation

cl-duckdb can now be installed via [[https://www.quicklisp.org/][Quicklisp]] from the [[https://ultralisp.org/][Ultralisp]]
distribution:

#+begin_src lisp
  ;; Install the ultralisp distribution if you don't have it already
  (ql-dist:install-dist "http://dist.ultralisp.org/" :prompt nil)
  ;; Load cl-duckdb
  (ql:quickload :duckdb)
#+end_src

** Development setup

- Install [[https://www.quicklisp.org/][Quicklisp]]
- Clone this repository and add it as a local Quicklisp project, for
  example:

#+begin_src sh
  git clone git@github.com:ak-coram/cl-duckdb.git ~/Projects/cl-duckdb
  ln -s ~/Projects/cl-duckdb ~/quicklisp/local-projects/cl-duckdb
#+end_src

- Start your favored REPL (e.g. sbcl) and load the library using
  Quicklisp:

#+begin_src lisp
  (ql:quickload :duckdb)
#+end_src

*** Running tests

- Load the tests via Quicklisp:

#+begin_src lisp
  (ql:quickload :duckdb/test)
#+end_src

- Use [[https://asdf.common-lisp.dev/][ASDF]] or [[https://fiveam.common-lisp.dev/][FiveAM]] to run the tests:

#+begin_src lisp
  ;; Using ASDF:
  (asdf:test-system :duckdb)
  ;; Using FiveAM directly:
  (fiveam:run! :duckdb)
#+end_src

** Basic usage

Please note that the API is experimental and subject to changes.

#+begin_src lisp
   ;; Use an in-memory transient database,
   ;; DDB:INITIALIZE-DEFAULT-CONNECTION is recommended for REPL sessions
   (ddb:with-transient-connection
     ;; Create a new range table containing integers
     (ddb::run "CREATE TABLE range (i INTEGER PRIMARY KEY)"
               "CREATE SEQUENCE seq_range_i START 1")

     ;; Use a prepared statement to populate the table with a 1000 values
     (ddb:with-statement (statement "INSERT INTO range VALUES (nextval('seq_range_i'))")
       (dotimes (_ 1000) (ddb:perform statement)))

     ;; Solve Project Euler Problem 9
     (let* ((euler9-query (str:concat "SELECT a.i * b.i * c.i AS solution "
                                      "FROM range AS c "
                                      "JOIN range AS b ON b.i < c.i "
                                      "JOIN range AS a ON a.i < b.i "
                                      "WHERE a.i + b.i + c.i = ? "
                                      "AND a.i * a.i + b.i * b.i = c.i * c.i"))
            (parameters '(1000))
            (results (ddb:query euler9-query parameters)))
       (format t "PE9 Solution: ~a~%" (ddb:get-result results 'solution 0))))
#+end_src

** Roadmap

- [X] Support for querying built-in general-purpose types
  - [X] NULL
  - [X] VARCHAR
  - [X] BOOLEAN
  - [X] TINYINT
  - [X] SMALLINT
  - [X] INTEGER
  - [X] BIGINT
  - [X] HUGEINT
  - [X] UTINYINT
  - [X] USMALLINT
  - [X] UINTEGER
  - [X] UBIGINT
  - [X] REAL (FLOAT)
  - [X] DOUBLE
  - [X] BLOB
  - [X] DATE
  - [X] DECIMAL(s, p)
  - [X] TIMESTAMP
  - [X] TIMESTAMP WITH TIME ZONE
  - [X] INTERVAL
  - [X] TIME
  - [X] UUID
- [-] Support for binding built-in general-purpose types
  - [X] NULL
  - [X] VARCHAR
  - [X] BOOLEAN
  - [X] TINYINT
  - [X] SMALLINT
  - [X] INTEGER
  - [X] BIGINT
  - [X] HUGEINT
  - [X] UTINYINT
  - [X] USMALLINT
  - [X] UINTEGER
  - [X] UBIGINT
  - [X] REAL (FLOAT)
  - [X] DOUBLE
  - [X] BLOB
  - [X] DATE
  - [X] DECIMAL(s, p)
  - [X] TIMESTAMP
  - [X] TIMESTAMP WITH TIME ZONE
  - [ ] INTERVAL
  - [ ] TIME
  - [ ] UUID
- [ ] Support for querying nested / composite types
- [ ] Support for binding nested / composite types
- [ ] ...

** Legal

- Released under the MIT License, same as DuckDB.
- [[https://en.wikipedia.org/wiki/File:Pair_of_mandarin_ducks.jpg][Source]] for README photo
