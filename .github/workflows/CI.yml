name: CI

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'README.org'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
  schedule:
    - cron: '0 0 1 * *'

jobs:
  test:
    name: ${{ matrix.lisp }} (${{ matrix.cffi }}) on ${{ matrix.os }} with duckdb ${{ matrix.duckdb }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        lisp: [sbcl-bin, ccl-bin/1.12.2, ecl/24.5.10]
        os: [ubuntu-latest, windows-latest, macos-13, macos-14]
        duckdb: [1.0.0]
        cffi: [default, static]
        exclude:
          - lisp: sbcl-bin
            cffi: static
          - lisp: ccl-bin/1.12.2
            cffi: static
          - os: windows-latest
            lisp: ccl-bin/1.12.2
          - os: windows-latest
            lisp: ecl/24.5.10
          - os: macos-14
            lisp: ccl-bin/1.12.2
    env:
      LISP: ${{ matrix.lisp }}
      DUCKDB_VERSION: ${{ matrix.duckdb }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Lisp
        uses: 40ants/setup-lisp@v4
        with:
          cache: true

      - name: Install DuckDB (Linux)
        if: runner.os == 'Linux'
        shell: bash
        run: |
          aria2c "https://github.com/duckdb/duckdb/releases/download/v${DUCKDB_VERSION}/libduckdb-linux-amd64.zip"
          unzip libduckdb-linux-amd64.zip -d .

      - name: Install DuckDB (macOS)
        if: runner.os == 'macOS'
        shell: bash
        run: |
          aria2c "https://github.com/duckdb/duckdb/releases/download/v${DUCKDB_VERSION}/libduckdb-osx-universal.zip"
          7z x libduckdb-osx-universal.zip

      - name: Install DuckDB (Windows)
        if: runner.os == 'Windows'
        run: |
          aria2c "https://github.com/duckdb/duckdb/releases/download/v$env:DUCKDB_VERSION/libduckdb-windows-amd64.zip"
          7z x libduckdb-windows-amd64.zip

      - name: Run tests (Non-Windows)
        if: runner.os != 'Windows'
        shell: bash
        run: |
          export DYLD_LIBRARY_PATH=./
          export LD_LIBRARY_PATH=./
          if [ ${{ matrix.cffi }} = 'static' ]; then export CL_DUCKDB_USE_SFFI=t; fi
          export CL_DUCKDB_LIBRARY_PATH="${{ github.workspace }}"
          if [ ${{ matrix.os }} = 'macos-latest' ]; then sudo cp ./libduckdb.dylib /usr/local/lib/; fi
          ros --eval '(ql-dist:install-dist "http://dist.ultralisp.org/" :prompt nil)' --eval '(uiop:quit)'
          ros install neil-lindquist/ci-utils
          asdf-register-project
          run-fiveam -e t -l duckdb/test :duckdb

      - name: Run tests (Windows)
        if: runner.os == 'Windows'
        shell: msys2 {0}
        run: |
          if [ ${{ matrix.cffi }} = 'static' ]; then export CL_DUCKDB_USE_SFFI=t; fi
          export CL_DUCKDB_LIBRARY_PATH="${{ github.workspace }}"
          pacman --noconfirm -S mingw-w64-x86_64-pkg-config mingw-w64-x86_64-libffi
          ros --eval '(ql-dist:install-dist "http://dist.ultralisp.org/" :prompt nil)' --eval '(uiop:quit)'
          ros --eval '(ql:quickload :cffi-grovel)' --eval "(progn (setf cffi-grovel::*cc-flags* (append (list \"-I`cygpath -w /mingw64/include`\") cffi-grovel::*cc-flags*)) (ql:quickload :cffi-libffi))" --eval "(progn (ql:quickload :duckdb/test) (uiop:quit (if (uiop:symbol-call :fiveam '#:run! :duckdb) 0 1)))"
